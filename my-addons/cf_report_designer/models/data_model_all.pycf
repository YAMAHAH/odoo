pycf/1.0:{"version": "1.0", "license": false, "expire": false, "data": "# -*- coding: utf-8 -*-\r\n# \u5eb7\u864e\u8f6f\u4ef6\u5de5\u4f5c\u5ba4\r\n# http://www.khcloud.net\r\n# QQ: 360026606\r\n# wechat: 360026606\r\n#--------------------------\r\n\r\nimport os\r\nimport sys\r\nimport logging\r\nimport string\r\n\r\ntry:\r\n    import simplejson as json\r\nexcept ImportError:\r\n    import json\r\nimport time\r\n# from lxml import etree\r\ntry:\r\n    import xml.etree.cElementTree as ET\r\nexcept ImportError:\r\n    import xml.etree.ElementTree as ET\r\nfrom xml.dom import minidom\r\n\r\nfrom odoo.exceptions import AccessError, UserError, ValidationError\r\nfrom odoo import models, fields, api, _\r\ntry:\r\n    from Crypto.Util.Padding import pad, unpad\r\n    from Crypto.Cipher import AES\r\nexcept ImportError as e:\r\n    raise ImportError('Failed to load module Crypto! Please install pycryptodome first!')\r\n\r\n_logger = logging.getLogger(__name__)\r\n\r\n##   Begin Of data_util\r\nimport os\r\nimport sys\r\nimport hashlib\r\nimport string\r\nimport random\r\nimport base64\r\nfrom binascii import b2a_hex, a2b_hex\r\n\r\nfrom Crypto import Random\r\nfrom Crypto.Cipher import AES\r\n\r\n___1 = ('C') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___2 = ('FS') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___3 = ('O') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___4 = ('F') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___5 = ('T') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___6 = ('S') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n\r\n___7 = ('t') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___8 = ('u') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___9 = ('d') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___10 = ('i') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___11 = ('o72') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___12 = ('0') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n___13 = ('1') #\u6b64\u590416|24|32\u4e2a\u5b57\u7b26\r\n\r\nAES_IV = b'1234567890123456'\r\n\r\ndef get__():\r\n    return ''.join(___1+___2+___3+___4+___5+___6+___7+___8+___9+___10+___11+___12+___13)\r\n\r\n# padding\u7b97\u6cd5\r\nBS = len(get__())\r\nmypad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\r\nmyunpad = lambda s : s[0:-ord(s[-1])]\r\n\r\nclass AESCoder(object):\r\n    \"\"\"\r\n        \u4f7f\u7528\u793a\u4f8b:\r\n        aes_encrypt = AESCoder()\r\n        text = \"python \u52a0\u5bc6\"\r\n        e = aes_encrypt.encrypt(text)\r\n        d = aes_encrypt.decrypt(e)\r\n        print text\r\n        print e\r\n        print d\r\n\r\n        e = \"ZBt7JVo0hubHZ5FLIhngEaz+n46vQfHTGxa1cL4CqA8=\"\r\n        d = aes_encrypt.decrypt(e)\r\n        print d\r\n    \"\"\"\r\n    def __init__(self, key=False, mode=AES.MODE_CBC):\r\n        self.key = key or get__()\r\n        self.mode = mode\r\n        self.key = self.key.encode('utf-8')\r\n\r\n    @staticmethod\r\n    def get_machine_code():\r\n        \"\"\"\u83b7\u53d6\u673a\u5668\u7801\"\"\"\r\n        import uuid\r\n        return str(uuid.UUID(int=uuid.getnode()))\r\n\r\n    @staticmethod\r\n    def rand_aes_key(size=16, by_base64=True, chars = string.ascii_uppercase + string.digits):\r\n        \"\"\"\r\n        :param size:  \u751f\u6210\u968f\u673a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u53ef\u9009\u503c\u4e3a16\u300124\u300132\r\n        :param chars:  \u751f\u6210\u5b57\u7b26\u4e32\u7684\u53d6\u503c\u8303\u56f4\r\n        :param by_base64:  \u662f\u5426\u7f16\u7801\u4e3abase64\r\n        :return:\r\n        \"\"\"\r\n        res =  ''.join(random.choice(chars) for _ in range(size))\r\n        return base64.b64encode(res) if by_base64 else res\r\n\r\n    #\u52a0\u5bc6\u51fd\u6570\r\n    def encrypt(self, text):\r\n        # text = mypad(text).encode('utf-8')\r\n        text = pad(text.encode('utf-8'), block_size=16)\r\n        _aes_iv = AES_IV\r\n        if type(AES_IV)=='str':\r\n            _aes_iv = AES_IV.encode(\"utf8\")\r\n\r\n        cryptor = AES.new(self.key, self.mode, AES_IV)\r\n\r\n        self.ciphertext = cryptor.encrypt(text)\r\n        #AES\u52a0\u5bc6\u65f6\u5019\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u4e0d\u4e00\u5b9a\u662fascii\u5b57\u7b26\u96c6\u7684\uff0c\u8f93\u51fa\u5230\u7ec8\u7aef\u6216\u8005\u4fdd\u5b58\u65f6\u5019\u53ef\u80fd\u5b58\u5728\u95ee\u9898\uff0c\u4f7f\u7528base64\u7f16\u7801\r\n        return base64.b64encode(self.ciphertext)\r\n\r\n    #\u89e3\u5bc6\u51fd\u6570\r\n    def decrypt(self, text):\r\n        decode = base64.b64decode(text)\r\n        cryptor = AES.new(self.key, self.mode, AES_IV)\r\n        # plain_text = cryptor.decrypt(decode)\r\n        # return plain_text\r\n\r\n        # plain_text = bytes.decode(cryptor.decrypt(decode))\r\n        # return myunpad(plain_text)\r\n\r\n        plain_text = bytes.decode(unpad(cryptor.decrypt(decode), block_size=16))\r\n        return plain_text\r\n\r\n\r\nfrom Crypto import Random\r\nfrom Crypto.Hash import SHA\r\nfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5\r\nfrom Crypto.Signature import PKCS1_v1_5 as Signature_pkcs1_v1_5\r\nfrom Crypto.PublicKey import RSA\r\n\r\nclass RSACipher():\r\n    \"\"\"\r\n    RSA\u52a0\u5bc6\r\n    \u751f\u6210\u5bc6\u94a5\u5bf9\uff1a\r\n    rsa = RSACipher( pri_key='pri.pem', pub_key='pub.pem', key_path=\"./\")\r\n    rsa.gen_key_pair()\r\n\r\n    \u52a0\u5bc6\uff1a\r\n    rsa = RSACipher( pri_key='pri.pem', pub_key='pub.pem', key_path=\"./\")\r\n    cipher_text = rsa.encrypt_str(\"00000000-0000-0000-0000-185e0f17f231\")\r\n\r\n    \u89e3\u5bc6\uff1a\r\n    rsa = RSACipher( pri_key='pri.pem', pub_key='pub.pem', key_path=\"./\")\r\n    cipher_text = rsa.decrypt_str(\"jUKq3d17wx7RoZ/mlEBBS/MVVLcoI5FWvkslVUmq1ApgQfnxzoT2gmjub4mS+f2ApIZxoXKHQQWmYCbgin5pxw==\")\r\n    \"\"\"\r\n\r\n    def __init__(self, pri_key='pri.pem', pub_key='pub.pem', key_path=os.path.abspath(os.path.dirname(__file__))):\r\n        self.KEY_PRIVATE = pri_key\r\n        self.KEY_PUBLIC = pub_key\r\n        self.KEY_PATH = key_path\r\n\r\n    def gen_key_pair(self):\r\n        # \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\r\n        random_generator = Random.new().read\r\n        # rsa\u7b97\u6cd5\u751f\u6210\u5b9e\u4f8b\r\n        rsa = RSA.generate(1024, random_generator)\r\n\r\n        # master\u7684\u79d8\u94a5\u5bf9\u7684\u751f\u6210\r\n        private_pem = rsa.exportKey()\r\n\r\n        with open(self.KEY_PATH + \"/\" + self.KEY_PRIVATE, 'w') as f:\r\n            f.write(private_pem)\r\n\r\n        public_pem = rsa.publickey().exportKey()\r\n        with open(self.KEY_PATH + \"/\" + self.KEY_PUBLIC, 'w') as f:\r\n            f.write(public_pem)\r\n\r\n    def decrypt_str(self, encrypt_text):\r\n        # \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\r\n        _key_path = self.KEY_PATH + \"/\" + self.KEY_PUBLIC\r\n        if not os.path.isfile(_key_path):\r\n            raise Exception(\"Decrypt key not exist or invalid!\")\r\n\r\n        random_generator = Random.new().read\r\n        with open(self.KEY_PATH + \"/\" + self.KEY_PRIVATE) as f:\r\n            key = f.read()\r\n            rsakey = RSA.importKey(key)\r\n            cipher = Cipher_pkcs1_v1_5.new(rsakey)\r\n            plain_text = cipher.decrypt(base64.b64decode(encrypt_text), random_generator)\r\n            return plain_text\r\n\r\n    def encrypt_str(self, message):\r\n        _key_path = self.KEY_PATH + \"/\" + self.KEY_PUBLIC\r\n        if not os.path.isfile(_key_path):\r\n            raise Exception(\"Encrypt key not exist or invalid!\")\r\n\r\n        with open(_key_path) as f:\r\n            key = f.read()\r\n            rsakey = RSA.importKey(key)\r\n            cipher = Cipher_pkcs1_v1_5.new(rsakey)\r\n            cipher_text = base64.b64encode(cipher.encrypt(message))\r\n            return cipher_text\r\n##    End Of data_util\r\n\r\n\r\n#################################\r\n##\r\n##  \u63a5\u4e0b\u6765\u7684\u601d\u8def\uff1a\r\n##  1\u3001\u5728\u52a8\u6001\u751f\u6210\u7684\u6a21\u677f\u4e2d\u653e\u4e00\u4e2at-esc\u6807\u7b7e\r\n##  2\u3001\u7ee7\u627f _inherit = \"report\"\uff0c\u7ee7\u627f def render(self, template, values=None) \u65b9\u6cd5\uff0c\r\n##     \u5728\u8be5\u65b9\u6cd5\u4e2d\u62fc\u6570\u636ejson\uff0c\u7136\u540e\u7531\u6e32\u67d3\u5f15\u64ce\u6e32\u67d3\u5230html\u4e2d\r\n##\r\n##################################\r\n\r\nREPORT_FILE_PERFIX = \"report_\"\r\nREPORT_NAME_PERFIX = \"report_\"\r\nREPORT_ID_PERFIX = \"report_\"\r\n\r\nclass CFPrintLicense(models.Model):\r\n    _name = 'cf.cfprint.license'\r\n    _description = '\u8bb8\u53ef\u8bc1\u4fe1\u606f'\r\n\r\n    mcode = fields.Char(string='\u673a\u5668\u7801', default=lambda x: AESCoder.get_machine_code(), help='\u670d\u52a1\u5668\u673a\u5668\u7801')\r\n    license = fields.Binary(string='\u8bb8\u53ef\u8bc1', help='\u6388\u6743\u8bb8\u53ef\u8bc1\u6587\u4ef6\uff0c\u4e0b\u8f7d\u540e\u6539\u540d\u4e3acfprint.lic\u653e\u5230\u5ba2\u6237\u7aefcfprint\u76ee\u5f55\u4e0b\u3002')\r\n    note = fields.Char(string='\u5907\u6ce8')\r\n\r\n    @api.model\r\n    def create_or_show_license(self):\r\n        mcode = AESCoder.get_machine_code()\r\n        lic = self.search([('mcode', '=', mcode)], limit=1)\r\n        if not lic:\r\n            lic = self.create({\"mcode\": mcode, \"note\": \"\u5eb7\u864e\u4e91\u62a5\u8868\u514d\u5199\u4ee3\u7801\u6a21\u5757\u8bb8\u53ef\u8bc1\"})\r\n        action = {\r\n            'type': 'ir.actions.act_window',\r\n            'name': _('\u6253\u5370\u670d\u52a1\u5668\u5730\u5740'),\r\n            'view_mode': 'form',\r\n            'view_type': 'form',\r\n            'res_model': 'cf.cfprint.license',\r\n            'nodestroy': 'true',\r\n            'res_id': lic.id,\r\n            'views': [(False, 'form')],\r\n            # 'view_id': self.env.ref(\"cfprint.cf_print_server_mapping_form\"),\r\n            'target': 'current',  #'new',\r\n        }\r\n        return action\r\n\r\n    @api.model\r\n    def create(self, vals):\r\n        vals['mcode'] = machine_code = AESCoder.get_machine_code() or ''  #Get machine code\r\n        return super(CFPrintLicense, self).create(vals)\r\n\r\n    # @api.multi\r\n    def write(self, vals):\r\n        vals['mcode'] = machine_code = AESCoder.get_machine_code() or ''  #Get machine code\r\n        return super(CFPrintLicense, self).write(vals)\r\n\r\n    # @api.multi\r\n    def name_get(self):\r\n        return [(record.id, \"\u5eb7\u864e\u4e91\u62a5\u8868\u8bb8\u53ef\u8bc1\" ) for record in self]\r\n\r\nclass IrModel(models.Model):\r\n    _inherit = 'ir.model'\r\n\r\n    def name_get(self):\r\n        return [(model.id, '%s(%s)' % (model.name, model.model)) for model  in self]\r\n\r\nclass CFReportCategory(models.Model):\r\n    _name = 'cf.report.define.category'\r\n    _description = '\u62a5\u8868\u5b9a\u4e49\u7c7b\u522b'\r\n\r\n    name = fields.Char(string=\"\u7c7b\u522b\u540d\u79f0\", required=True, help=\"\u4e3a\u4fbf\u4e8e\u7ba1\u7406\uff0c\u62a5\u8868\u5b9a\u4e49\u8fdb\u884c\u5206\u7c7b\u3002\u9ed8\u8ba4\u662f\u201c\u672a\u5206\u7c7b\u201d\u3002\")\r\n    lines = fields.One2many(\"cf.report.define\", \"category_id\", string=\"\u62a5\u8868\")\r\n    note = fields.Text(string=\"\u5907\u6ce8\")\r\n\r\nclass CFReportPrinter(models.Model):\r\n    _name = 'cf.report.printer'\r\n    _description = '\u6253\u5370\u673a\u540d\u79f0'\r\n\r\n    name = fields.Char(string=\"\u6253\u5370\u673a\u540d\u79f0\", required=True, help=\"\u62a5\u8868\u6253\u5370\u8981\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u6253\u5370\u673a\u540d\u79f0\uff0c\u4e0d\u8bbe\u7f6e\u5219\u4f7f\u7528\u9ed8\u8ba4\u6253\u5370\u673a\u3002\\n\u5982\u679c\u4e0d\u6e05\u695a\u6253\u5370\u673a\u540d\u79f0\uff0c\u8bf7\u4e0d\u8981\u586b\u5199\uff01\")\r\n    note = fields.Text(string=\"\u5907\u6ce8\")\r\n\r\nclass CFReportDefine(models.Model):\r\n    _name = 'cf.report.define'\r\n    _description = '\u62a5\u8868\u5b9a\u4e49'\r\n\r\n    def _compute_technical_name(self):\r\n        for rec in self:\r\n            rec.technical_name = rec._get_report_name()\r\n\r\n    name = fields.Char(string='\u62a5\u8868ID', required=True, copy=True, help=\"\u7528\u4e00\u786e\u5b9a\u62a5\u8868\u7684\u552f\u4e00ID\uff0c\u53ea\u5141\u8bb8\u82f1\u6587\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\")\r\n    comment = fields.Char(string='\u62a5\u8868\u4e2d\u6587\u540d\u79f0', required=True, copy=True)\r\n    technical_name = fields.Char(string=\"\u6280\u672f\u540d\u79f0\", readonly=True, compute=\"_compute_technical_name\", help=\"\u62a5\u8868\u7684\u6280\u672f\u540d\u79f0\uff0c\u4e3b\u8981\u7528\u4e8e\u5176\u4ed6\u5730\u65b9\u76f4\u63a5\u8c03\u7528\u62a5\u8868\u3002\")\r\n    model_id = fields.Many2one('ir.model', string='\u6570\u636e\u8868(model)', required=True, copy=True, ondelete=\"cascade\", help=\"\u62a5\u8868\u5bf9\u5e94\u7684\u6570\u636e\u8868(model)\")\r\n    template_id = fields.Many2one('cf.template', string='\u62a5\u8868\u6a21\u677f', copy=True, help=\"\u8be5\u62a5\u8868\u4f7f\u7528\u7684\u6253\u5370\u6a21\u677f\u3002\\n\u6a21\u677f\u5982\u679c\u5c1a\u672a\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u5148\u521b\u5efa\u4e00\u4e2a\u6a21\u677f\u5b9a\u4e49\uff0c\u5f85\u751f\u6210\u6570\u636e\u5e76\u8bbe\u8ba1\u62a5\u8868\u6a21\u677f\u540e\u518d\u4e0a\u4f20\u5230\u6a21\u677f\u5e93\u3002\")\r\n    company_id = fields.Many2one('res.company', string='\u6240\u5c5e\u516c\u53f8', default=lambda self: self.env['res.company']._company_default_get(''))\r\n    open_print = fields.Boolean(string=\"\u662f\u5426\u5f39\u51fa\u6253\u5370\", default=False)\r\n    hide_print_menu = fields.Boolean(string=\"\u9690\u85cf\u6253\u5370\u83dc\u5355\", default=False, help=\"\u662f\u5426\u9690\u85cf\u6253\u5370\u83dc\u5355\u3002\u5982\u679c\u9690\u85cf\uff0c\u5219\u9700\u8981\u901a\u8fc7\u4e8c\u6b21\u5f00\u53d1\u6765\u521b\u5efa\u83dc\u5355\u6216\u6309\u94ae\u8c03\u7528\u62a5\u8868\u3002\")\r\n    use_client_templ = fields.Boolean(string=\"\u4f7f\u7528\u5ba2\u6237\u7aef\u6a21\u677f\",  default=False, help=\"\u6253\u5370\u65f6\u4f7f\u7528\u4fdd\u5b58\u5728\u6253\u5370\u5ba2\u6237\u7aef\u7684\u6253\u5370\u6a21\u677f\u3002\u5982\u679c\u662f\uff0c\u5219\u9700\u8981\u8f93\u5165client_templ_name\")\r\n    client_templ_name = fields.Char(string=\"\u5ba2\u6237\u7aef\u6a21\u677f\u6587\u4ef6\u540d\", help=\"\u5982\u679c\u8bbe\u7f6e\u4e86\u4f7f\u7528\u5ba2\u6237\u7aef\u6a21\u677f\uff0c\u5219\u5728\u6b64\u5f55\u5165\u5ba2\u6237\u7aef\u6a21\u677f\u8def\u5f84\u548c\u6587\u4ef6\u540d\")\r\n    field_ids = fields.One2many(\"cf.report.define.field\", \"report_id\", domain=lambda self: [('model_id', '=', self.model_id.id)], string=\"\u5b57\u6bb5\", help=\"\u8981\u5728\u62a5\u8868\u6a21\u677f\u4e2d\u4f7f\u7528\u7684\u5b57\u6bb5\u4fe1\u606f\")\r\n    prn_server_address = fields.Char(string=\"\u6253\u5370\u670d\u52a1\u5668\u5730\u5740\", default=\"127.0.0.1\", help=\"\u5eb7\u864e\u4e91\u62a5\u8868\u6253\u5370\u670d\u52a1\u5668\u5730\u5740\uff0c\u9ed8\u8ba4\u662f127.0.0.1\u3002\\n\u5982\u679c\u4e0d\u6e05\u695a\u8be5\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8bf7\u52ff\u4fee\u6539\u8be5\u53c2\u6570\uff01\")\r\n    prn_server_port = fields.Integer(string=\"\u6253\u5370\u670d\u52a1\u5668\u7aef\u53e3\", default=\"54321\", help=\"\u5eb7\u864e\u4e91\u62a5\u8868\u6253\u5370\u670d\u52a1\u5668\u7aef\u53e3\uff0c\u9ed8\u8ba4\u662f54321\u3002\\n\u5982\u679c\u4e0d\u6e05\u695a\u8be5\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8bf7\u52ff\u4fee\u6539\u8be5\u53c2\u6570\uff01\")\r\n    printer_id = fields.Many2one(\"cf.report.printer\", string=\"\u6253\u5370\u673a\", help=\"\u8981\u4f7f\u7528\u7684\u6253\u5370\u673a\uff0c\u7559\u7a7a\u5219\u4f7f\u7528\u9ed8\u8ba4\u6253\u5370\u673a\")\r\n    category_id = fields.Many2one(\"cf.report.define.category\", string=\"\u62a5\u8868\u5206\u7c7b\", help=\"\u62a5\u8868\u7c7b\u522b\uff0c\u9ed8\u8ba4\u4e3a\u672a\u5206\u7c7b\") #, default=lambda self: self.env.ref('cfprint.cf_report_define_category_common')\r\n    back_after_print = fields.Boolean(string=\"\u6253\u5370\u540e\u8fd4\u56de\", default=False, help=\"\u6253\u5370\u8bf7\u6c42\u53d1\u9001\u5230\u6253\u5370\u4f3a\u670d\u5668\u540e\u8fd4\u56de\u524d\u9875\")\r\n    state = fields.Selection([('draft', '\u8349\u7a3f'), ('defined', '\u5b8c\u6210\u62a5\u8868\u5b9a\u4e49')], string=\"\u72b6\u6001\", default=\"draft\")\r\n    note = fields.Text(string=\"\u5907\u6ce8\")\r\n\r\n    _sql_constraints = [\r\n        ('uniq_name', 'unique(name)', _('\u62a5\u8868\u540d\u79f0\u5fc5\u987b\u552f\u4e00!')),\r\n    ]\r\n\r\n    @api.model\r\n    def create(self, vals):\r\n        if not vals.get(\"template_id\", False):\r\n            _name = vals.get(\"name\", False)\r\n            _comment = vals.get(\"comment\", False)\r\n            if not _name:\r\n                raise ValidationError(_(\"\u8bf7\u5148\u6307\u5b9a\u62a5\u8868ID\uff01\"))\r\n            cf_templ_id = \"cf_templ_%s\" % (REPORT_NAME_PERFIX, _name.replace('.', '_'))\r\n            cf_templ = self.env[\"cf.template\"].search([('templ_id', '=', cf_templ_id)], limit=1)\r\n            if not cf_templ:\r\n                cf_templ = self.env[\"cf.template\"].create({\r\n                    \"templ_id\": cf_templ_id,\r\n                    \"name\": (_comment or cf_templ_id) + \"\u6253\u5370\u6a21\u677f\",\r\n                    \"description\": (_comment or cf_templ_id) + \"\u6253\u5370\u6a21\u677f\",\r\n                })\r\n            vals[\"template_id\"] = cf_templ.id\r\n\r\n        return super(CFReportDefine, self).create(vals)\r\n\r\n    # @api.multi\r\n    def unlink(self):\r\n        for rpt in self:\r\n            rpt._remove_report()\r\n        return super(CFReportDefine, self).unlink()\r\n\r\n    def _get_report_id(self):\r\n        self.ensure_one()\r\n        return \"%s%s\" % (REPORT_ID_PERFIX, self.name)\r\n\r\n    def _get_report_name(self, with_module=True):\r\n        self.ensure_one()\r\n        if with_module:\r\n            return \"cf_report_designer.%s%s\" % (REPORT_NAME_PERFIX, self.name.replace('.', '_') if self.name else \"\")\r\n        else:\r\n            return \"%s%s\" % (REPORT_NAME_PERFIX, self.name.replace('.', '_') if self.name else \"\")\r\n\r\n    def _get_report_file(self, with_module=True):\r\n        self.ensure_one()\r\n        if with_module:\r\n            return \"cf_report_designer.%s%s\" % (REPORT_FILE_PERFIX, self.name.replace('.', '_'))\r\n        else:\r\n            return \"%s%s\" % (REPORT_FILE_PERFIX, self.name.replace('.', '_'))\r\n\r\n    # @api.one\r\n    def _remove_report(self):\r\n        report_id = self._get_report_id()\r\n        report_name = self._get_report_name()\r\n        report_file = self._get_report_file()\r\n\r\n        # \u5220\u9664\u62a5\u8868\u5b9a\u4e49\r\n        self.env[\"ir.model.data\"].sudo().search([('name', '=', report_id)]).unlink()\r\n        # self.env['ir.values'].sudo().search([('name', '=', report_id)]).unlink()\r\n        reports = self.env['ir.actions.report'].sudo().search([('report_name', '=', report_name)])\r\n        for rpt in reports:\r\n            rpt.unlink_action()\r\n            rpt.unlink()\r\n\r\n        # \u5220\u9664\u6a21\u677f\r\n        self.env['ir.ui.view'].search([('key', '=', report_name)]).unlink()\r\n\r\n        # # \u5220\u9664\u62a5\u8868\u5b9a\u4e49\r\n        # self.env[\"ir.model.data\"].search([('name', '=', report_id)]).unlink()\r\n        # self.env['ir.actions.report'].search([('report_name', '=', report_name), ('cf_report_define_id', '!=', False)]).unlink()\r\n        #\r\n        # # \u5220\u9664\u6a21\u677f\r\n        # self.env['ir.ui.view'].search([('key', '=', report_name)]).unlink()\r\n\r\n\r\n    def action_retrieve_fields(self):\r\n        \"\"\"\u751f\u6210\u62a5\u8868\u5b57\u6bb5\"\"\"\r\n        # \u5148\u5220\u9664\u65e7\u5b57\u6bb5\u8bb0\u5f55\r\n        self.env[\"cf.report.define.field\"].search([('report_id', '=', self.id)]).unlink()\r\n\r\n        # \u589e\u52a0\u5b57\u6bb5\r\n        for line in self.model_id.field_id:\r\n            # print(\"name: %s, model_id: %s, field_id: %s\"%(line.name, line.model_id.id, line.id))\r\n            field = self.env['cf.report.define.field'].create({\r\n                \"report_id\": self.id,\r\n                \"model_id\": line.model_id.id,\r\n                \"field_id\": line.id,\r\n                # \"related_field_id\": None,\r\n            })\r\n\r\n    def action_remove_fields(self):\r\n        \"\"\"\u5220\u9664\u5df2\u83b7\u53d6\u6a21\u578b\u5b57\u6bb5\"\"\"\r\n        self.env[\"cf.report.define.field\"].search([('report_id', '=', self.id)]).unlink()\r\n\r\n    def _make_report_defind(self):\r\n        \"\"\"\u751f\u6210\u62a5\u8868\u5b9a\u4e49\"\"\"\r\n        report_id = self._get_report_id()\r\n        report_name = self._get_report_name()\r\n        report_file = self._get_report_file()\r\n\r\n        # \u518d\u521b\u5efa\u65b0\u8bb0\u5f55\r\n        report_obj = self.env['ir.actions.report']\r\n        report = report_obj.create({\r\n            \"name\": self.comment or self.name,\r\n            \"type\": \"ir.actions.report\",\r\n            \"binding_type\": \"report\",\r\n            \"model\": self.model_id.model,\r\n            \"report_type\": \"qweb-html\",\r\n            \"report_name\": report_name,\r\n            \"report_file\": report_file,  #\u81ea\u5b9a\u4e49\u7684\u62a5\u8868\u53d6\u6570\u903b\u8f91python\u7c7b\uff0c\u5982\u679c\u6709\uff0c\u5219\u6839\u636e\u8be5\u6587\u4ef6\u6267\u884c\u7ed3\u679c\u6e32\u67d3\u62a5\u8868\r\n            \"multi\": False,\r\n            \"print_report_name\": self.comment or self.name,  # TODO\uff1a\u8fd9\u4e2a\u6253\u5370\u540d\u79f0\u53ef\u6539\u6210\u5176\u4ed6\u503c\r\n            \"attachment_use\": False,\r\n            \"cf_report_define_id\": self.id,\r\n            # \"menu\": \"False\" if self.hide_print_menu else \"True\",\r\n            # \"invisible\": \"0\" if self.hide_print_menu else \"1\",\r\n        })\r\n        if report:\r\n            self.env[\"ir.model.data\"].create({\r\n                \"name\": \"action_%s\"%(report_id),\r\n                \"model\": \"ir.actions.report\",\r\n                \"module\": \"cf_report_designer\",\r\n                \"noupdate\":  False,\r\n                \"res_id\": report.id\r\n            })\r\n\r\n            report.create_action()\r\n\r\n    def _make_templ(self):\r\n        \"\"\"\u751f\u6210\u6a21\u677f\u5b9a\u4e49\"\"\"\r\n\r\n        templ_id = \"%s%s\" % (REPORT_NAME_PERFIX, self.name.replace('.', '_'))\r\n        report_id = self._get_report_id()\r\n        report_name = self._get_report_name()\r\n        report_file = self._get_report_file()\r\n\r\n        _short_report_name = self._get_report_name(False)\r\n\r\n        arch_db = \"\"\"<?xml version=\"1.0\"?>\r\n<t t-name=\"%s\">\r\n  <t t-call=\"cfprint.html_container\">\r\n    <t t-raw=\"show_message\"/>\r\n  </t>\r\n<script type=\"text/javascript\">\r\n  <t t-raw=\"cfprint_json\"/>\r\n</script>\r\n</t>\r\n\"\"\" % (_short_report_name)\r\n\r\n        view_obj = self.env['ir.ui.view']\r\n\r\n        try:\r\n            view = view_obj.create({\r\n                \"name\": report_id,\r\n                \"key\" : report_name,\r\n                \"priority\": 16,\r\n                \"type\": \"qweb\",\r\n                \"arch_db\": arch_db,\r\n                \"mode\": \"primary\",\r\n                \"active\": True,\r\n                # \"cf_report_define_id\": self.id,\r\n            })\r\n            if view:\r\n                # XML_ID \u4e0e res_id \u5bf9\u7167\u8868\r\n                self.env[\"ir.model.data\"].create({\r\n                    \"name\": _short_report_name,\r\n                    \"model\": \"ir.ui.view\",\r\n                    \"module\": \"cf_report_designer\",\r\n                    \"noupdate\": False,\r\n                    \"res_id\": view.id\r\n                })\r\n\r\n        except Exception as e:\r\n            _logger.error(\"Create report template[%s] failed.\"%(report_name))\r\n            raise e\r\n\r\n    def action_generate(self):\r\n        \"\"\"\u751f\u6210\u62a5\u8868\u5b9a\u4e49\u548c\u6a21\u677f\u5b9a\u4e49\"\"\"\r\n\r\n        # \u5148\u5220\u9664\u65e7\u7684\u8bb0\u5f55\r\n        self._remove_report()\r\n\r\n        # \u521b\u5efaodoo\u539f\u751f\u7684\u62a5\u8868\u5b9a\u4e49\r\n        self._make_report_defind()\r\n\r\n        # \u521b\u5efaQweb\u6a21\u677f\u5b9a\u4e49\r\n        self._make_templ()\r\n\r\n        self.write({\"state\": \"defined\"})\r\n\r\n    def action_design(self):\r\n        \"\"\"\u542f\u52a8\u6a21\u677f\u8bbe\u8ba1\"\"\"\r\n\r\n        #\u67e5\u8be25\u6761\u8bb0\u5f55\u7528\u8bb0\u4e8e\u8bbe\u8ba1\u6a21\u677f\r\n        docs = self.env[self.model_id.model].search([], limit=5)\r\n        docids = [x.id for x in docs]\r\n\r\n        # report_id = \"%s%s\" % (REPORT_ID_PERFIX, self.name)\r\n        report_id = \"cf_report_designer.%s%s\" % (REPORT_ID_PERFIX, self.name)\r\n        # report_id = \"%s.%s%s\" % (self.model_id.model, REPORT_ID_PERFIX, self.name)\r\n        report_name = \"cf_report_designer.%s%s\" % (REPORT_NAME_PERFIX, self.name)\r\n        datas = {\"is_design\": True,\r\n                 \"docs\": docs,\r\n                 \"docids\": docids\r\n                 }\r\n\r\n        return (self.env['ir.actions.report'].search([('report_name', '=', report_name)], limit=1)\r\n                .with_context({'is_design': True})\r\n                .report_action(docids, data = datas))\r\n\r\n\r\nclass CFReportDefineFields(models.Model):\r\n    _name = 'cf.report.define.field'\r\n    _description = '\u62a5\u8868\u5b57\u6bb5'\r\n    _order = 'report_id, id'\r\n\r\n    report_id = fields.Many2one(\"cf.report.define\", string=\"\u62a5\u8868\u5b9a\u4e49\", required=True, ondelete='cascade', help=\"\u5b57\u6bb5\u6240\u5728\u7684\u62a5\u8868\u5b9a\u4e49\")\r\n    model_id = fields.Many2one('ir.model', string=\"\u6570\u636e\u8868(\u6a21\u578b)\", required=True, ondelete='cascade', help=\"\u5b57\u6bb5\u6240\u5728\u7684model\")\r\n    model_name = fields.Char(related=\"model_id.name\", string=\"\u6a21\u578b\u540d\u79f0\")\r\n    field_id = fields.Many2one(\"ir.model.fields\", string=\"\u5b57\u6bb5\", required=True, ondelete='cascade')\r\n    name = fields.Char(related=\"field_id.name\", string='\u5b57\u6bb5\u540d\u79f0')\r\n    field_description = fields.Char(related=\"field_id.field_description\", string='\u5b57\u6bb5\u8bf4\u660e')\r\n    ttype = fields.Selection(related=\"field_id.ttype\", string='\u5b57\u6bb5\u7c7b\u578b')\r\n    related_field_id = fields.Many2one(\"cf.report.define.field\", string=\"\u5173\u8054\u5b57\u6bb5\", help=\"\u4e0e\u5173\u8054\u8868\u5173\u8054\u7684\u5b57\u6bb5(related_external_field_ids)\")  #, oldname=\"parent_field_id\"\r\n    related_external_field_ids = fields.One2many(\"cf.report.define.field\", \"related_field_id\", string=\"\u5173\u8054\u6570\u636e\u8868\u5b57\u6bb5\", help=\"\u4e0e\u5f53\u524d\u8868\u76f8\u5173\u8054\u7684\u8868\u5b57\u6bb5\")  #,oldname=\"sub_field_ids\"\r\n    note = fields.Text(string=\"\u5907\u6ce8\")\r\n\r\n    related_field_model_id = fields.Many2one('ir.model', compute=\"_compute_relation_model\", string=\"\u5173\u8054\u6570\u636e\u8868\uff08\u6a21\u578b\uff09\", help=\"\u5173\u8054\u5b57\u6bb5\u6240\u5728\u7684model\u3002\u5f53\u524d\u5b57\u6bb5\u4e3aOne2many\uff0cMany2many\uff0cMany2one\u65f6\u6709\u503c\u3002\")\r\n    # related_field_model_name = fields.Char(related=\"related_field_model_id.name\", string=\"\u5173\u8054\u6570\u636e\u8868\u540d\u79f0\", help=\"\u5173\u8054\u5b57\u6bb5\u6240\u5728\u7684model\u540d\u79f0\")\r\n    related_field_model_name = fields.Char(compute=\"_compute_relation_model\", string=\"\u5173\u8054\u6570\u636e\u8868\u540d\u79f0\", help=\"\u5173\u8054\u5b57\u6bb5\u6240\u5728\u7684model\u540d\u79f0\")\r\n\r\n    _sql_constraints = [\r\n        ('uniq_repoer_model_field', 'unique(report_id, model_id, related_field_id, field_id)', '\u62a5\u8868 + \u8868 + \u5173\u8054\u4e0a\u7ea7\u5b57\u6bb5 + \u5b57\u6bb5\u5fc5\u987b\u552f\u4e00!'),\r\n    ]\r\n\r\n    @api.model\r\n    def create(self, vals):\r\n        # for v in vals:\r\n        if not vals.get(\"model_id\", False):\r\n            field = self.env[\"ir.model.fields\"].browse(vals.get(\"field_id\", 0))\r\n            if field:\r\n                vals[\"model_id\"] = field.model_id.id\r\n\r\n        #\u5148\u5220\u9664\u65e7\u8bb0\u5f55\r\n        self.search([('report_id', '=', vals.get(\"report_id\", 0)), ('model_id', '=', vals.get(\"model_id\", 0)),\r\n                     ('related_field_id', '=', vals.get(\"related_field_id\", 0)), ('field_id', '=', vals.get(\"field_id\", 0))]).unlink()\r\n\r\n        return super(CFReportDefineFields, self).create(vals)\r\n\r\n    def _compute_relation_model(self):\r\n        for field in self:\r\n            relation = self.env['ir.model']._get(field.field_id.relation)\r\n            field.related_field_model_id = relation.id if relation else None\r\n            field.related_field_model_name = relation.name if relation else None\r\n\r\n    def action_retrieve_fields(self):\r\n        \"\"\"\u83b7\u53d6\u5173\u8054\u8868\u5b57\u6bb5\"\"\"\r\n        if self.field_id and (self.field_id.ttype == 'one2many' or self.field_id.ttype == 'many2many' or self.field_id.ttype == 'many2one'):\r\n            if self.env.get(self.field_id.relation, '_EMPTY')=='_EMPTY':  #\u8fd9\u91cc\u5373\u4f7f\u6ca1\u6709\u6570\u636e\uff0c\u83b7\u53d6\u5230\u4e5f\u662f\u4e00\u4e2a\u7a7alist\uff0c\u4e0d\u80fd\u7528False\u6765\u5224\u65ad\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\r\n                raise AccessError(_(\"\u672a\u627e\u5230\u5173\u8054\u5b57\u6bb5\u5bf9\u5e94\u7684\u8868\uff08%s\uff09\uff0c\u65e0\u6cd5\u83b7\u53d6\u5173\u8054\u8868\u5b57\u6bb5\uff01\" % (self.field_id.relation)))\r\n\r\n            # rel_model = self.env[\"ir.model\"].search([('model', '=', self.field_id.relation)], limit=1)\r\n            rel_model = self.env['ir.model']._get(self.field_id.relation)\r\n\r\n            # \u5148\u5220\u9664\u65e7\u5b57\u6bb5\u8bb0\u5f55\r\n            self.action_remove_fields()\r\n\r\n            # \u589e\u52a0\u5b57\u6bb5\r\n            for line in rel_model.field_id:\r\n                field = self.env['cf.report.define.field'].create({\r\n                    \"related_field_id\": self.id,\r\n                    \"report_id\": self.report_id.id,\r\n                    \"model_id\": line.model_id.id,\r\n                    \"field_id\": line.id,\r\n                })\r\n\r\n    def action_remove_fields(self):\r\n        \"\"\"\u5220\u9664\u5173\u8054\u8868\u5b57\u6bb5\"\"\"\r\n        if self.field_id and (self.field_id.ttype == 'one2many' or self.field_id.ttype == 'many2many' or self.field_id.ttype == 'many2one'):\r\n            rel_model = self.env['ir.model']._get(self.field_id.relation)\r\n\r\n            # \u5148\u5220\u9664\u65e7\u5b57\u6bb5\u8bb0\u5f55\r\n            self.env[\"cf.report.define.field\"].search([('report_id', '=', self.report_id.id), ('model_id', '=', rel_model.id), ('related_field_id', '=', self.id)]).unlink()\r\n\r\n    def action_view_sub_fields(self):\r\n        \"\"\"\u67e5\u770b\u5173\u8054\u8868\u5b57\u6bb5\"\"\"\r\n        self.ensure_one()\r\n        form_id = self.env.ref('cf_report_designer.cf_report_define_field_form').id\r\n        return {'type': 'ir.actions.act_window',\r\n                'res_model': 'cf.report.define.field',\r\n                'view_mode': 'form',\r\n                'views': [(form_id, 'form')],\r\n                'res_id': self.id,\r\n                'target': 'new',\r\n                'limit': 1000,\r\n                'name':'\u5173\u8054\u8868\u5b57\u6bb5',\r\n                'flags': {'form': {'action_buttons': False}}\r\n                }\r\n\r\n# class IrUIView(models.Model):\r\n#     _inherit = 'ir.ui.view'\r\n#\r\n#     cf_report_define_id = fields.Many2one(\"cf.report.define\", string=\"\u62a5\u8868\u5b9a\u4e49\", help=\"\u5982\u679c\u662f\u5eb7\u864e\u4e91\u62a5\u8868\uff0c\u5219\u4fdd\u5b58\u5bf9\u5e94\u7684\u62a5\u8868\u5b9a\u4e49\u3002\")\r\n\r\n### Begin of cf_render\r\nfrom xml.dom import minidom\r\nimport uuid\r\n\r\nSHOW_MESSAHE_TEMPL = \"<h5 style=\\\"margin-top: 3rem; text-align: center;\\\">%s</h4>\"\r\n\r\n# class Report(models.Model):\r\nclass IrActionsReport(models.Model):\r\n    \"\"\"\r\n    \u7ee7\u627fReport\u57fa\u7c7b\uff0c\u589e\u52a0\u81ea\u5b9a\u4e49\u51fd\u6570\u8f93\u51fa\u5230QWeb\u6a21\u677f\u4e2d\uff0c\u65b9\u4fbf\u5728\u6a21\u677f\u4e2d\u4fbf\u6377\u53d6\u5eb7\u864e\u4e91\u62a5\u8868\u6a21\u677f\r\n    \"\"\"\r\n    # _inherit = \"report\"\r\n    _inherit = 'ir.actions.report'\r\n    _description = 'Report Action'\r\n\r\n    cf_report_define_id = fields.Many2one(\"cf.report.define\", string=\"\u62a5\u8868\u5b9a\u4e49\", help=\"\u5982\u679c\u662f\u5eb7\u864e\u4e91\u62a5\u8868\uff0c\u5219\u4fdd\u5b58\u5bf9\u5e94\u7684\u62a5\u8868\u5b9a\u4e49\u3002\")\r\n\r\n    def _make_cfprint_json(self, values):\r\n        \"\"\"\u6839\u636e\u62a5\u8868\u5b9a\u4e49\u751f\u6210\u62a5\u8868\u6570\u636e\"\"\"\r\n\r\n        def _remove_duplicated(lst):\r\n            \"\"\"\r\n            \u5220\u9664\u5217\u8868\u4e2d\u7684\u91cd\u590d\u503c\r\n            :param lst:\r\n            :return:\r\n            \"\"\"\r\n            seen = set()\r\n            new_lst = []\r\n            start = time.time()\r\n            for d in lst:\r\n                t = tuple(d.items())\r\n                if t not in seen:\r\n                    seen.add(t)\r\n                    new_lst.append(d)\r\n\r\n            end = time.time()\r\n            print(\"_remove_duplicated consume: %f\" % ((end - start)))\r\n            return new_lst\r\n\r\n        def _convert_field_type(field):\r\n            \"\"\"\r\n            \u5b57\u6bb5\u7c7b\u578b\u8f6c\u6362\u6210\u5eb7\u864e\u53bb\u62a5\u8868\u5b57\u6bb5\u7c7b\u578b\r\n            :param field: \u5f85\u8f6c\u6362\u5b57\u6bb5\r\n            :return:\r\n            \"\"\"\r\n            _type = \"str\"\r\n            if field.ttype in [\"binary\"]:\r\n                _type = \"blob\"\r\n            elif field.ttype in [\"boolean\"]:\r\n                _type = \"boolean\"\r\n            elif field.ttype in ['char', 'selection', 'reference']:\r\n                _type = \"str\"\r\n            elif field.ttype in ['text', 'html']:\r\n                _type = \"text\"\r\n            elif field.ttype in ['date', 'datetime']:\r\n                _type = \"date\"\r\n            elif field.ttype in ['float', 'monetary']:\r\n                _type = \"float\"\r\n            elif field.ttype in [\"integer\", \"many2one\"]:\r\n                _type = \"int\"\r\n            return _type\r\n\r\n        def _make_data_obj(report_define, model, fields, docs, datas, related_field=False):\r\n            \"\"\"\r\n            \u751f\u6210\u6253\u5370\u6570\u636e\u5bf9\u8c61\r\n            :param report_define: \u62a5\u8868\u5b9a\u4e49\r\n            :param model:         \u8981\u751f\u6210\u6570\u636e\u7684model\r\n            :param fields:        \u8981\u751f\u6210\u7684\u5b57\u6bb5\r\n            :param docs:          \u6570\u636e\u8bb0\u5f55\u96c6\r\n            :param datas:         \u8f6c\u6362\u540e\u7684\u6570\u636e\u7ed3\u6784\r\n            :param related_field: \u662f\u5426\u662f\u5173\u8054\u5b57\u6bb5\r\n            :return:\r\n            \"\"\"\r\n            field_len = {}  #\u8bb0\u5f55\u5b57\u6bb5\u957f\u5ea6\uff0c\u751f\u6210\u6570\u636e\u7ed3\u6784\u65f6\u7528\u4f5c\u5b57\u6bb5\u957f\u5ea6\r\n\r\n            model_name_dash = model.model.replace(\".\", \"_\")\r\n\r\n            # ### \u4e25\u91cd\uff1a\u8fd9\u91cc\u4e0d\u80fd\u628amany2one\u7684\u5173\u8054\u5173\u7cfb\u8868\u52a0\u4e3b\u8868\u5b57\u6bb5\u7684\u503c\u4f5c\u540e\u7f00\uff0c\u90a3\u6837\u5f53\u6570\u636e\u53d8\u5316\u65f6\uff0c\u6a21\u5757\u4e2d\u7684\u6253\u5370\u7ec4\u4ef6\u65e0\u6cd5\u81ea\u9002\u5e94\u540d\u79f0\u7684\u53d8\u5316\r\n            # many2one\u7684\u5173\u8054\u5728\u6a21\u677f\u4e2d\u901a\u8fc7Dataset\u7684locate\u51fd\u6570\u6765\u5b9e\u73b0\u8bb0\u5f55\u7684\u5b9a\u4f4d\uff0c\u4e0d\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u5f3a\u5236\u4f53\u73b0\u5173\u8054\u5173\u7cfb\r\n            # if related_field:\r\n            #     model_name_dash = model_name_dash + \"_\" + related_field.name.replace(\".\", \"_\") + \"_\" + str(related_field.id)\r\n\r\n            if not datas.get(model_name_dash, False):\r\n                datas[model_name_dash] = {\"cols\": [], \"rows\": []}\r\n\r\n            cols = datas[model_name_dash][\"cols\"]\r\n\r\n            _MIN_FIELD_LEN = 255\r\n\r\n            start = time.time()\r\n            for record in docs:\r\n                row = {}\r\n                for field in [d for d in fields if d.model_id.model == model.model]:\r\n                    try:\r\n                        if field.ttype == 'binary':\r\n                            row[field.name] = \"base64/jpg:%s\" % (record[field.name].strip().decode(\"UTF-8\").replace(\"\\n\", \"\") if record[field.name] else \"\")\r\n\r\n                        elif field.ttype in ['boolean']:\r\n                            row[field.name] = record[field.name]\r\n\r\n                        elif field.ttype in ['char', 'text', 'html', 'reference']:\r\n                            row[field.name] = record[field.name] if record[field.name] else \"\"\r\n                            if len(row[field.name]) > field_len.get(field.name, _MIN_FIELD_LEN):\r\n                                field_len[field.name] = len(row[field.name])\r\n\r\n                        elif field.ttype in ['date', 'datetime']:\r\n                            row[field.name] = record[field.name].strftime(\"%Y-%m-%d %H:%M:%S\") if record[field.name] else \"\"\r\n\r\n                        elif field.ttype in ['float', 'integer', 'monetary']:\r\n                            row[field.name] = record[field.name] if record[field.name]!=None else \"\"\r\n\r\n                        elif field.ttype in [\"one2many\"] and len(field.related_external_field_ids) > 0:\r\n                            # row[field.name] = \",\".join([str(x.id) for x in record[field.name]]) # record[field.name].id if record[field.name] else \"\"\r\n                            _sub_docs = record[field.name]\r\n                            _sub_fields = field.related_external_field_ids\r\n                            _sub_model = self.env['ir.model']._get(field.field_id.relation)\r\n                            # if _sub_docs and len(_sub_docs) > 0 and _sub_fields and len(_sub_fields) > 0 and _sub_model:\r\n                            if _sub_fields and len(_sub_fields) > 0 and _sub_model:  #\u4e0d\u7ba1\u6709\u6ca1\u6709one2many\u8bb0\u5f55\u90fd\u751f\u6210\u5173\u8054\u8868\u8bb0\u5f55\r\n                                _make_data_obj(report_define, _sub_model, _sub_fields, _sub_docs, datas)     #\u751f\u6210\u5173\u8054\u8868\u7684json\r\n\r\n                        elif field.ttype in [\"many2many\"] and len(field.related_external_field_ids) > 0:\r\n                            row[field.name] = \",\".join([str(x.id) for x in record[field.name]]) # record[field.name].id if record[field.name] else \"\"\r\n                            _sub_docs = record[field.name]\r\n                            _sub_fields = field.related_external_field_ids\r\n                            _sub_model = self.env['ir.model']._get(field.field_id.relation)\r\n                            # if _sub_docs and len(_sub_docs) > 0 and _sub_fields and len(_sub_fields) > 0 and _sub_model:\r\n                            if _sub_fields and len(_sub_fields) > 0 and _sub_model:  #\u4e0d\u7ba1\u6709\u6ca1\u6709one2many\u8bb0\u5f55\u90fd\u751f\u6210\u5173\u8054\u8868\u8bb0\u5f55\r\n                                _make_data_obj(report_define, _sub_model, _sub_fields, _sub_docs, datas)     #\u751f\u6210\u5173\u8054\u8868\u7684json\r\n\r\n                        elif field.ttype in ['many2one']:\r\n                            row[field.name] = record[field.name].id if record[field.name] else \"\"\r\n                            row[field.name + \"_name\"] = record[field.name].name if record[field.name] and record[field.name].name else \"\"\r\n                            row[field.name + \"_display_name\"] = record[field.name].display_name if record[field.name] and record[field.name].display_name else \"\"\r\n                            if len(row[field.name + \"_name\"]) > field_len.get(field.name + \"_name\", _MIN_FIELD_LEN):\r\n                                field_len[field.name + \"_name\"] = len(row[field.name + \"_name\"])\r\n                            if len(row[field.name + \"_display_name\"]) > field_len.get(field.name + \"_display_name\", _MIN_FIELD_LEN):\r\n                                field_len[field.name + \"_display_name\"] = len(row[field.name + \"_display_name\"])\r\n\r\n                            # \u6839\u636e\u9009\u5b9a\u7684\u5173\u8054\u8868\u5b57\u6bb5\uff0c\u751f\u6210\u5173\u8054\u8868\u6570\u636e\r\n                            if len(field.related_external_field_ids) > 0:\r\n                                _sub_docs = record[field.name]\r\n                                _sub_fields = field.related_external_field_ids\r\n                                _sub_model = self.env['ir.model']._get(field.field_id.relation)\r\n                                #if _sub_docs and len(_sub_docs) > 0 and _sub_fields and len(_sub_fields) > 0 and _sub_model:  #\u9700\u8981\u6709one2many\u8bb0\u5f55\u624d\u751f\u6210\u4ece\u8868\u8bb0\u5f55\r\n                                if _sub_fields and len(_sub_fields) > 0 and _sub_model:  #\u4e0d\u7ba1\u6709\u6ca1\u6709one2many\u8bb0\u5f55\u90fd\u751f\u6210\u4ece\u8868\u8bb0\u5f55\r\n                                    _make_data_obj(report_define, _sub_model, _sub_fields, _sub_docs, datas, field)     #\u751f\u6210\u5173\u8054\u8868\u7684json\r\n\r\n                        elif field.ttype in ['selection']:\r\n                            row[field.name] = record[field.name] if record[field.name] else \"\"\r\n                            _name = dict(record._fields[field.name]._description_selection(record.env)).get(row[field.name], '')\r\n                            row[field.name + \"_name\"] = _name or \"\"\r\n                            if len(row[field.name + \"_name\"]) > field_len.get(field.name + \"_name\", _MIN_FIELD_LEN):\r\n                                field_len[field.name + \"_name\"] = len(row[field.name + \"_name\"])\r\n\r\n                    except Exception as ex:\r\n                        _logger.error(_(\"\u751f\u6210\u5eb7\u864e\u4e91\u62a5\u8868\u6253\u5370\u6570\u636e\u51fa\u9519\u3002model: %s, field: %s, Error: %s\")%(model.model, field.name, ex))\r\n                        pass\r\n\r\n                if row:\r\n                    #\u6392\u9664\u91cd\u590d\u7684\u8bb0\u5f55\r\n                    if row.get(\"id\") not in [x.get(\"id\") for x in datas[model_name_dash][\"rows\"]]:\r\n                        datas[model_name_dash][\"rows\"].append(row)\r\n\r\n            # \u751f\u6210\u62a5\u8868\u5b57\u6bb5\u5b9a\u4e49\uff0c\u53ea\u5904\u7406\u672c\u7ea7model\u7684\u5b57\u6bb5\r\n            for field in [d for d in fields if d.model_id.model == model.model]:\r\n                _type = _convert_field_type(field)\r\n\r\n                _len = _MIN_FIELD_LEN\r\n                if _type == \"str\":\r\n                    _len = field_len.get(field.name, _MIN_FIELD_LEN)  # \u53ea\u6709str\u7c7b\u578b\u7684\u57fa\u672c\u5b57\u6bb5\u624d\u8bbe\u7f6e\u957f\u5ea6\r\n                if _type == \"text\":\r\n                    _len = field_len.get(field.name, _MIN_FIELD_LEN)  # \u53ea\u6709str\u7c7b\u578b\u7684\u57fa\u672c\u5b57\u6bb5\u624d\u8bbe\u7f6e\u957f\u5ea6\r\n                    _type == \"str\"\r\n\r\n                datas[model_name_dash][\"cols\"].append(  { \"type\": _type, \"size\": _len, \"name\": field.name, \"required\": False, \"comment\": field.field_description } )\r\n\r\n                # #\u83b7\u53d6many2one\u5b57\u6bb5\u7684\u5173\u8054\u8868\u5b57\u6bb5\r\n                # if field.ttype in [\"many2one\"]:\r\n                if field.ttype in [\"one2many\", \"many2many\"]:\r\n                    datas[model_name_dash][\"cols\"].append( {\"type\": \"str\", \"size\": field_len.get(field.name, _MIN_FIELD_LEN), \"name\": field.name+ \"_ids\", \"required\": False, \"comment\": field.field_description})\r\n\r\n                if field.ttype in [\"many2one\"]:\r\n                    datas[model_name_dash][\"cols\"].append( {\"type\": \"str\", \"size\": field_len.get(field.name + \"_name\", _MIN_FIELD_LEN), \"name\": field.name+ \"_name\", \"required\": False, \"comment\": field.field_description})\r\n                    datas[model_name_dash][\"cols\"].append({\"type\": \"str\", \"size\": field_len.get(field.name + \"_display_name\", _MIN_FIELD_LEN), \"name\": field.name + \"_display_name\",\"required\": False, \"comment\": field.field_description})\r\n\r\n                if field.ttype in [\"selection\"]:\r\n                    datas[model_name_dash][\"cols\"].append( {\"type\": \"str\", \"size\": field_len.get(field.name + \"_name\", _MIN_FIELD_LEN), \"name\": field.name+ \"_name\", \"required\": False, \"comment\": field.field_description})\r\n\r\n            datas[model_name_dash][\"cols\"] = _remove_duplicated(datas[model_name_dash][\"cols\"])  # \u53bb\u9664\u91cd\u590d\u6dfb\u52a0\u7684\u5b57\u6bb5\r\n\r\n            end = time.time()\r\n            print(\"_make_data_obj[%s] consume: %f\" % (model_name_dash, (end - start)))\r\n            return datas\r\n\r\n            ## \u4ee5\u4e0a\u5185\u90e8\u51fd\u6570\r\n\r\n        report_define = values.get(\"report_define\")\r\n        machine_code = AESCoder.get_machine_code() or ''  # Get machine code\r\n        # print_copies = values.get(\"print_copies\", 1)\r\n        print_obj = {\r\n            \"template\": \"\",\r\n            \"ver\": 4,\r\n            \"Copies\": values.get(\"print_copies\", 1),  #\u6253\u5370\u4efd\u6570\uff0c\u9ed8\u8ba4\u662f1\r\n            \"Duplex\": 0,\r\n            \"mcode\": machine_code,\r\n            \"Tables\": []\r\n        }\r\n        # \u8bbe\u7f6e\u6253\u5370\u673a\r\n        if report_define.printer_id and report_define.printer_id != '':\r\n            print_obj[\"printer\"] = report_define.printer_id.name\r\n\r\n        _is_design = self._context.get(\"is_design\", False)\r\n        if _is_design:\r\n            print_obj[\"design\"] = True\r\n            show_message = SHOW_MESSAHE_TEMPL % (_(\"\"\"\u8bf7\u5728\u5eb7\u864e\u4e91\u62a5\u8868\u8bbe\u8ba1\u5668\u8bbe\u8ba1\u62a5\u8868\u3002<br/>\r\n            \u5982\u679c\u62a5\u8868\u8bbe\u8ba1\u5668\u672a\u6253\u5f00\uff0c\u8bf7\u68c0\u67e5\u5eb7\u864e\u4e91\u62a5\u8868\u662f\u5426\u5df2\u542f\u52a8\uff01<br/><br/><br/>\r\n            \u6a21\u677f\u8bbe\u8ba1\u5b8c\u6210\u540e\uff0c\u8bf7\u5728odoo\u83dc\u5355\u201c\u5eb7\u864e\u4e91\u62a5\u8868\u201d--&gt;\u201c\u6a21\u677f\u201d\u83dc\u5355\u4e2d\uff0c\u6253\u5f00\u6a21\u677f\u8bb0\u5f55\u4e0a\u4f20\u6216\u66f4\u65b0\u6a21\u677f\uff01<br/><br/>\r\n            <a href=\\\"cfprint://open\\\">\u542f\u52a8\u5eb7\u864e\u4e91\u62a5\u8868</a>\r\n            \"\"\"))\r\n            values.update( show_message=show_message )\r\n\r\n        if report_define.use_client_templ and report_define.client_templ_name:\r\n            print_obj[\"template\"] = report_define.client_templ_name\r\n        else:\r\n            if not report_define.template_id or not report_define.template_id.templ_id:\r\n                values.update(  show_message = SHOW_MESSAHE_TEMPL%(_(\"\u672a\u6307\u5b9a\u8981\u6253\u5370\u7684\u62a5\u8868\u6a21\u677f\uff0c\u8bf7\u5148\u6307\u5b9a\u62a5\u8868\u6a21\u677f\u3002\") ))\r\n            templ_data = self.env['cf.template'].search([('templ_id', '=', report_define.template_id.templ_id)], limit=1).template\r\n            if not templ_data or templ_data==\"\":\r\n                if not _is_design:\r\n                    values.update( show_message = SHOW_MESSAHE_TEMPL%(_(\"\u6307\u5b9a\u7684\u62a5\u8868\u6a21\u677f\u672a\u5b9a\u4e49\u6216\u6a21\u677f\u65e0\u5185\u5bb9\uff0c\u8bf7\u5148\u8bbe\u8ba1\u6a21\u677f\u5e76\u66f4\u65b0\u5230\u6a21\u677f\u8bb0\u5f55\u8868\u3002</h3>\")) )\r\n                else:\r\n                    print_obj[\"template\"] = \"cf_templ_%s\" % (report_define.name.replace('.', '_'))\r\n            else:\r\n                print_obj[\"template\"] = \"base64:\" + templ_data.strip().decode(\"UTF-8\").replace(\"\\n\", \"\")\r\n\r\n        docs = values.get(\"docs\")\r\n        if not docs or len(docs)<1:\r\n            active_ids = self._context.get(\"active_ids\", [])\r\n            docs = self.env[report_define.model_id.model].browse(active_ids)\r\n\r\n        datas = {}\r\n        start = time.time()\r\n        _make_data_obj(report_define, report_define.model_id, report_define.field_ids, docs, datas)\r\n        end = time.time()\r\n        print(\"_make_data_obj consume:  %f\"%(end - start))\r\n\r\n        # \u6570\u636e\u5408\u5e76\u5230\u603b\u7684\u6570\u636e\u5bf9\u8c61\r\n        for i, (model_name, v) in enumerate(datas.items()):\r\n            # tableName = string.capwords(model_name).replace(\".\",\"_\")\r\n            tableName = model_name.replace(\".\", \"_\")\r\n            cols = v[\"cols\"]\r\n            rows = v[\"rows\"]\r\n            print_obj[\"Tables\"].append({\r\n                \"Name\": tableName,\r\n                \"Cols\": cols,\r\n                \"Data\": rows,\r\n            })\r\n\r\n        return print_obj\r\n\r\n    def _set_report_data(self, values, report_data):\r\n        \"\"\"\u628a\u751f\u6210\u7684\u62a5\u8868\u6570\u636e\u6e32\u67d3\u5230qweb\u6a21\u677f\u5f62\u6210HTML\u683c\u5f0f\u62a5\u8868\"\"\"\r\n\r\n        report_define = values.get(\"report_define\")\r\n\r\n        _address = \"127.0.0.1\"\r\n        _port = 54321\r\n        _prn_mapping = self.env[\"cf.print.server.user.mapping\"].search([('user_id', '=', self.env.user.id)], limit=1)\r\n        if _prn_mapping and _prn_mapping.prn_server_ip:\r\n            _address = _prn_mapping.prn_server_ip\r\n            if _prn_mapping.prn_server_port and _prn_mapping.prn_server_port>0 and _prn_mapping.prn_server_port<65535: _port = _prn_mapping.prn_server_port\r\n        else:\r\n            _address = report_define.prn_server_address or \"127.0.0.1\"\r\n            _port = report_define.prn_server_port if report_define.prn_server_port and report_define.prn_server_port>0 and report_define.prn_server_port<65535 else 54321\r\n\r\n        # \u628a\u6570\u636e\u8f6c\u6210json\u5bf9\u8c61\r\n        json_scripts = [\r\n            'var cfprint_addr = \\\"%s\\\"'%(_address),\r\n            'var cfprint_port = %d'%(_port),\r\n            \"var _delay_close = -1\"\r\n        ]\r\n        _logger.debug('Dump report data to json...')\r\n        _report_data_plain = json.dumps(report_data, ensure_ascii=False)\r\n\r\n        # \u52a0\u5bc6\u6570\u636e\r\n        _logger.debug('Encrypt report data...')\r\n        key = AESCoder.rand_aes_key(16, False)\r\n        _logger.debug(\"AES Key: %s\"%(key))\r\n        aes = AESCoder(key, AES.MODE_CBC)\r\n        start = time.time()\r\n        _report_data_encrypted = aes.encrypt(_report_data_plain)\r\n        end = time.time()\r\n        print(\"Encrypt consume: %f\"%(end - start))\r\n\r\n        # \u52a0\u5bc6\u5bc6\u7801\r\n        _logger.debug('Encrypt key...')\r\n        # FIXME: \u8fd9\u91cc\u7684\u5bc6\u7801\u52a0\u5bc6\u6700\u540e\u8981\u6539\u6210\u4e0d\u5bf9\u79f0\u52a0\u5bc6\uff0c\u7531\u4e8eDelphi\u548cPython\u4e4b\u95f4\u7684\u4e92\u89e3\u5bc6\u95ee\u9898\u96be\u4ee5\u89e3\u51b3\uff0c\u6682\u65f6\u5148\u53ea\u5bf9\u5bc6\u7801\u8fdb\u884cBase64\u5904\u7406\r\n        # rsa = RSACipher()\r\n        # _key_encrypted = rsa.encrypt_str(key)\r\n        # aes = AESCoder(''.join(TOKEN_CRYPT_KEY), AES.MODE_CBC)\r\n        aes = AESCoder(get__(), AES.MODE_CBC)\r\n        _key_encrypted = aes.encrypt(key)\r\n\r\n        final_data = {\r\n            \"token\": _key_encrypted.decode(\"utf-8\"),\r\n            \"dea\": \"aes\",        #\u6570\u636e\u52a0\u5bc6\u65b9\u6cd5, Data Encrypt Algorithm\r\n            \"tea\": \"aes\",        #Token\u52a0\u5bc6\u65b9\u6cd5, Token Encrypt Algorithm\r\n            \"data\": _report_data_encrypted.decode(\"utf-8\")\r\n        }\r\n\r\n        _logger.debug('Dump final_data...')\r\n        # json_scripts.append(\"var _data = %s\"%(json.dumps(report_data)))\r\n        json_scripts.append(\"var _data = %s\" % (json.dumps(final_data, ensure_ascii=False)))\r\n\r\n        json_scripts.append(\"\"\"_reportData = JSON.stringify(_data);\\nconsole.log(_reportData);\"\"\")\r\n\r\n        # \u5982\u679c\u6307\u5b9a\u4e86\u6253\u5370\u5b8c\u6210\u540e\u8fd4\u56de\u4e0a\u4e00\u9875\uff0c\u5219\u589e\u52a0\u8fd4\u56de\u4e0a\u4e00\u9875\u7684JS\r\n        if report_define.back_after_print:\r\n            json_scripts.append(\"\"\"\r\n            function _delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } \\n \r\n            _delay(1000).then(() => window.history.go(-1));  /*\u5ef6\u8fdf\u4e00\u79d2\u540e\u8fd4\u56de\u5230\u4e0a\u4e00\u9875*/\"\"\")\r\n        json_data = \";\\n\".join(json_scripts)\r\n        _logger.debug('json_data: %s ...'%(json_data[0: 300]))  #\u53d6\u524d300\u4e2a\u5b57\u7b26\u8f93\u51fa\u5230\u65e5\u5fd7\uff0c\u5982\u679c\u5168\u90e8\u8f93\u51fa\u5230\u65e5\u5fd7\u592a\u591a\u4e86\r\n\r\n        values.update(\r\n            cfprint_json=json_data,\r\n        )\r\n\r\n    # @api.multi\r\n    def render(self, template, values=None):\r\n        \"\"\"\r\n        \u7ee7\u627freport\u5bf9\u8c61\u7684\u6e32\u67d3\u65b9\u6cd5\uff0c\u5728\u4e0a\u4e0b\u6587\u4e2d\u589e\u52a0\u6a21\u677f\u5bf9\u8c61ORM\r\n        :param template:\r\n        :param values:\r\n        :return:\r\n        \"\"\"\r\n        if values is None:\r\n            values = {}\r\n\r\n        _logger.debug(\"Render report...\")\r\n        report = self._get_report_from_name(template)\r\n        if not report:\r\n            raise AccessError(_(\"\u672a\u627e\u5230\u62a5\u8868\uff08%s\uff09\u5b9a\u4e49\uff0c\u53ef\u80fd\u662f\u62a5\u8868\u672a\u5b9a\u4e49\u6216\u5b9a\u4e49\u672a\u751f\u6548\uff0c\u5982\u679c\u4f7f\u7528\u5eb7\u864e\u4e91\u62a5\u8868\uff0c\u8bf7\u5728\u62a5\u8868\u5b9a\u4e49\u4e2d\u91cd\u65b0\u751f\u6210\u4e00\u4e0b\u62a5\u8868\u5b9a\u4e49\uff01\" % (template)))\r\n\r\n        show_message = SHOW_MESSAHE_TEMPL%(_(\"\u6b63\u5728\u6253\u5370\uff0c\u8bf7\u7a0d\u5019...<br/><br/>\u5982\u679c\u6253\u5370\u673a\u672a\u8f93\u51fa\u62a5\u8868\uff0c\u8bf7\u68c0\u67e5\u5eb7\u864e\u4e91\u62a5\u8868\u662f\u5426\u5df2\u542f\u52a8\uff01<br/><br/><a href=\\\"cfprint://open\\\">\u542f\u52a8\u5eb7\u864e\u4e91\u62a5\u8868</a>\"))\r\n\r\n        _logger.debug(\"Prepare docs...\")\r\n        docs = values.get(\"docs\", False)\r\n        if not docs or len(docs)<1:\r\n            active_ids = self._context.get(\"active_ids\", [])\r\n            docs = self.env[report.model].browse(active_ids)\r\n            values.update( docs = docs )\r\n        if not docs or len(docs)<1:\r\n            show_message = SHOW_MESSAHE_TEMPL%(_(\"\u6ca1\u6709\u53ef\u4ee5\u6253\u5370\u6570\u636e\u3002\"))\r\n\r\n        _logger.debug(\"Retrieve report define...\")\r\n        #\u89e3\u6790\u62a5\u8868\u5b9a\u4e49ID\r\n        rpt_defind_name = report.xml_id.split(\".\")\r\n        if len(rpt_defind_name)>1:\r\n            rpt_defind_name = rpt_defind_name[1].replace(REPORT_ID_PERFIX, \"\")\r\n        else:\r\n            rpt_defind_name = rpt_defind_name[0].replace(REPORT_ID_PERFIX, \"\")\r\n\r\n        values.update(\r\n            show_message=show_message\r\n        )\r\n\r\n        # \u6839\u636e\u62a5\u8868\u5b9a\u4e49ID\u67e5\u8be2\u62a5\u8868\u5b9a\u4e49\r\n        rpt_define = self.env[\"cf.report.define\"].search([('name', '=', rpt_defind_name)], limit=1)\r\n\r\n        _logger.debug(\"Prepare to make json...[%s]\" % (rpt_defind_name))\r\n        if rpt_define:\r\n            _logger.debug(\"Set report_define to values...\")\r\n            values.update(  report_define=rpt_define, )\r\n            _logger.debug(\"Begin to make report data ...\")\r\n            report_data = self._make_cfprint_json(values)\r\n            _logger.debug(\"Begin to convert report data to json...\")\r\n            self._set_report_data(values, report_data)\r\n            _logger.debug(\"Converted!!!\")\r\n\r\n        obj = super(IrActionsReport, self).render(template, values)\r\n        return obj\r\n\r\n    def action_upload_templ_win(self):\r\n        res_id = self._context.get(\"templ_id\", False)\r\n        return {\r\n            'name': _('\u4e0a\u4f20\u5eb7\u864e\u4e91\u62a5\u8868\u6a21\u677f'),\r\n            'type': 'ir.actions.act_window',\r\n            'view_type': 'form',\r\n            'res_model': 'cf.template',\r\n            'res_id': res_id,\r\n            # 'view_id': False,\r\n            'context': self._context,\r\n            'target': 'current',\r\n            'nodestroy': True\r\n        }\r\n\r\n    @api.model\r\n    # def render_qweb_html(self, docids, data=None):\r\n    def _render_qweb_html(self, docids, data=None):\r\n        is_design = data.get(\"is_design\", False)\r\n        _act = _(\"\u8bbe\u8ba1\") if is_design else _(\"\u6253\u5370\")\r\n\r\n        rpt_define = self.cf_report_define_id\r\n        if rpt_define:\r\n            if not docids:\r\n                docids = data.get(\"docids\", None)\r\n\r\n            show_message = SHOW_MESSAHE_TEMPL%(_(\"\u6b63\u5728\u6253\u5370\uff0c\u8bf7\u7a0d\u5019...<br/><br/>\u5982\u679c\u6253\u5370\u673a\u672a\u8f93\u51fa\u62a5\u8868\uff0c\u8bf7\u68c0\u67e5\u5eb7\u864e\u4e91\u62a5\u8868\u662f\u5426\u5df2\u542f\u52a8\uff01<br/><br/><a href=\\\"cfprint://open\\\">\u542f\u52a8\u5eb7\u864e\u4e91\u62a5\u8868</a>\"))\r\n\r\n            docs = data.get(\"docs\", False)\r\n\r\n            if (not docs or len(docs)<1) and (not docids or len(docids)<1):\r\n                docids = self._context.get(\"active_ids\", [])\r\n\r\n            if (not docs or not isinstance(docs, list) or len(docs)<1) and docids and rpt_define and rpt_define.model_id and rpt_define.model_id.model:\r\n                docs = self.env[rpt_define.model_id.model].browse(docids)\r\n\r\n            if (not docs or len(docs)<1) and (not docids or len(docids)<1):\r\n                show_message = SHOW_MESSAHE_TEMPL % (_(\"\u6ca1\u6709\u53ef\u4ee5%s\u6570\u636e\u3002\")%(_act))\r\n\r\n            data.update( docs=docs, show_message=show_message, )\r\n\r\n            if rpt_define:\r\n                data.update(  report_define=rpt_define, )\r\n                start = time.time()\r\n                report_data = self.with_context(is_design=is_design)._make_cfprint_json(data)\r\n                end = time.time()\r\n                print(\"_make_cfprint_json consume:  %f\" % (end - start))\r\n                self._set_report_data(data, report_data)\r\n\r\n        # return super(IrActionsReport, self).render_qweb_html(docids, data)\r\n        return super(IrActionsReport, self)._render_qweb_html(docids, data)\r\n\r\n### End of cf_render"}